{"version":3,"sources":["Constants/Index.jsx","Task.jsx","Actions/Actions.jsx","RootReducer/Reducer.jsx","RootReducer/RootReducer.jsx","Store/Store.jsx","App.js","reportWebVitals.js","index.js"],"names":["connect","state","showForm","taskAdd","showTaskForm","allTaskList","taskList","dispatch","enableTaskForm","args","type","constants","payload","addNewTaskData","addTaskForm","deleteTaskData","deletelist","props","useState","description","date","time","assignname","values","setValues","showdelete","setShowdelete","showedit","setShowedit","taskId","setTaskId","handleChange","evt","target","name","value","className","length","onClick","onSubmit","event","preventDefault","newData","existingData","placeholder","onChange","DeleteOutlined","handleDelete","map","items","EditOutlined","id","handleEdit","CheckOutlined","BellOutlined","initialState","rootReducer","combineReducers","action","taskData","oldData","push","filter","item","middleware","logger","thunk","Store","createStore","composeWithDevTools","applyMiddleware","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5af1fbb6.chunk.js","sourcesContent":["export default {\r\n    ADD_TASK: 'ADD_TASK',\r\n    ADD_NEW_TASK: 'ADD_NEW_TASK',\r\n    DELETE_TASK: 'DELETE_TASK'\r\n};","import React from 'react'\r\nimport './Task.scss'\r\nimport {\r\n    EditOutlined,\r\n    CheckOutlined,\r\n    BellOutlined,\r\n    DeleteOutlined\r\n} from '@ant-design/icons';\r\nimport { addTask, addNewTask, deleteTask } from './Actions/Actions';\r\nimport { connect } from 'react-redux';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst Task = (props) => {\r\n    const { enableTaskForm, showForm, allTaskList, addNewTaskData, deleteTaskData } = props\r\n    const [values, setValues] = useState({\r\n        description: '',\r\n        date: '',\r\n        time: '',\r\n        assignname: ''\r\n    })\r\n    const [showdelete, setShowdelete] = useState(false)\r\n    const [showedit, setShowedit] = useState(true)\r\n    const [taskId, setTaskId] = useState()\r\n\r\n    const handleChange = (evt) => {\r\n        const { name, value } = evt.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        setShowedit(true)\r\n        addNewTaskData({\r\n            newData: values,\r\n            existingData: allTaskList\r\n        })\r\n    }\r\n\r\n    const handleEdit = (items) => {\r\n        enableTaskForm(true)\r\n        setShowdelete(true)\r\n        setShowedit(false)\r\n        setValues({\r\n            description: items.description,\r\n            date: items.date,\r\n            time: items.time,\r\n            assignname: items.assignname\r\n        })\r\n        setTaskId(items.id)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        enableTaskForm(false)\r\n        setShowedit(true)\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        setValues({\r\n            description: '',\r\n            date: '',\r\n            time: '',\r\n            assignname: ''\r\n        })\r\n        enableTaskForm(true)\r\n        setShowedit(false)\r\n    }\r\n\r\n    const handleDelete = (taskId) => {\r\n        deleteTaskData(taskId)\r\n        enableTaskForm(false)\r\n        setShowedit(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"task-container\">\r\n                <span>Tasks {allTaskList.length}</span>\r\n                <button onClick={handleAdd}>+</button>\r\n            </div>\r\n            {showForm === false ? \"\" :\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"input-container\">\r\n                        <label className='label'>Task Description</label>\r\n                        <input\r\n                            className='input'\r\n                            type='text'\r\n                            name='description'\r\n                            placeholder='Follow Up'\r\n                            value={values.description}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <div className='date-time'>\r\n                            <div className='date'>\r\n                                <label className='label'>Date</label>\r\n                                <input\r\n                                    className='input'\r\n                                    type='date'\r\n                                    name='date'\r\n                                    value={values.date}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className='date'>\r\n                                <label className='label'>Time</label>\r\n                                <input\r\n                                    className='input'\r\n                                    type='time'\r\n                                    name='time'\r\n                                    placeholder='Enter the card name'\r\n                                    value={values.time}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <label className='label'>Assign User</label>\r\n                        <input\r\n                            className='input'\r\n                            type='text'\r\n                            name='assignname'\r\n                            placeholder='User'\r\n                            value={values.assignname}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <div className='button-container'>\r\n                            {showdelete === true ?\r\n                                <DeleteOutlined className='delete'\r\n                                    onClick={() => handleDelete(taskId)}\r\n                                /> : \"\"}\r\n\r\n                            <button className='button1' onClick={handleCancel}>\r\n                                Cancel\r\n                            </button>\r\n                            <button className='button2' type='submit' >\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>}\r\n\r\n            {showedit === true ? allTaskList.map(items => (<div className=\"task-container\">\r\n                <span>{items.description}</span>\r\n                <span>{items.date}</span>\r\n                <EditOutlined onClick={() => handleEdit(items)} />\r\n                <CheckOutlined />\r\n                <BellOutlined />\r\n            </div>)) : \"\"}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    showForm: state.taskAdd.showTaskForm,\r\n    allTaskList: state.taskAdd.taskList\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    enableTaskForm: args => dispatch(addTask(args)),\r\n    addNewTaskData: args => dispatch(addNewTask(args)),\r\n    deleteTaskData: args => dispatch(deleteTask(args))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Task)","import constants from '../Constants/Index'\r\n\r\n\r\nexport const addTask = (showTaskForm) => dispatch => {\r\n    return dispatch({\r\n        type: constants.ADD_TASK,\r\n        payload: showTaskForm\r\n    })\r\n}\r\nexport const addNewTask = (addTaskForm) => dispatch => {\r\n    return dispatch({\r\n        type: constants.ADD_NEW_TASK,\r\n        payload: addTaskForm\r\n    })\r\n}\r\nexport const deleteTask = (deletelist) => dispatch => {\r\n    return dispatch({\r\n        type: constants.DELETE_TASK,\r\n        payload: deletelist\r\n    })\r\n}\r\n","import constants from '../Constants/Index'\r\n\r\nconst initialState = {\r\n    showTaskForm: false,\r\n    taskList: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case constants.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                showTaskForm: payload,\r\n            };\r\n        case constants.ADD_NEW_TASK:\r\n            const taskData = payload.newData\r\n            taskData.id = payload.existingData.length\r\n            const oldData = payload.existingData\r\n            oldData.push(taskData)\r\n            return {\r\n                ...state,\r\n                taskList: oldData,\r\n                showTaskForm: false\r\n            }\r\n        case constants.DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                taskList: state.taskList.filter((item) => item.id !== action.payload)\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport taskAdd from './Reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    taskAdd,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../RootReducer/RootReducer';\r\n\r\n\r\nconst middleware = [logger, thunk];\r\n\r\nconst Store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\n\r\nexport default Store","import React from 'react'\r\nimport './App.css';\r\nimport Task from './Task'\r\nimport Store from './Store/Store'\r\nimport { Provider } from 'react-redux';\r\n\r\nconst App = () => (\r\n  <Provider store={Store}>\r\n    <div>\r\n      <Task />\r\n    </div>\r\n  </Provider>\r\n)\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}